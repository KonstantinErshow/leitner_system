<?php

/**
грубо!
Так как мы разрабатываем приложение по MVC, модель работает с БД и отдает нам данные, View будет выдавать (отрисовывать) представление - отдавать браузеру результат работы, контроллеры реагируют на действия пользователя, пользователь ткнет на "удалить"  -контроллер скажет модели "удали" - он как переключатель-регулировщик, сам не выполняет действий, принимает от пользователя сигналы. по этим сигналам модель уже удаляет

контроллер мост между пользователем и моделью

роут файл будет создавать страницы. как? будет разбирать адрес (можно и по своему) и исходя из адреса будет вызывать определенный контроллер , вызывать определенное действие.

Контроллер по задачам будет.

Пример яркий. Контроллер пользователь.
Как сущность пользователь имеет много задач: зарегаться, выйти, пароль сменить и тд

класс контроллер, методы - действия (экшены).
**/ 

/*
** класс маршрутизации 
урл localhost/leithner_system/cabinet
localhost/leithner_system/cabinet/users/
localhost/leithner_system/cabinet/collections/
localhost/leithner_system/cabinet/collections?collection_id=..

Каждая часть урла - контроллер и действие
*/
class Routing  {

	public static function buildRoute() {
		/*Контроллер и экшен по умолчанию*/
		$controllerName="IndexController"; //например зашел на главную страницу, не нужен контроллер как таковой -
		$modelName = "IndexModel";  //модель 
		$action  ="index"; //и экшн по умолчанию - метод класса

		//строим маршрут
		$route = explode('/', parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)); // возвращает cabinet/collections?collection_id= - массив
		

	//	print_r($route);

		$i=count($route)-1;

		while ($i>1) {
			if ($route[$i]!='') {
				if (is_file(CONTROLLER_PATH. ucfirst($route[$i]). "Controller.php"))
				{
					$controllerName = ucfirst($route[$i]). "Controller";
					$modelName = ucfirst($route[$i]). "Model";
					break;

				} else {
					$action = $route[$i];
				}
			}
			$i--;
		}

		require_once CONTROLLER_PATH . $controllerName . ".php"; //подключаем либо контроллер по умолчанию, либо тот, что 
		//отловили выше в if
		require_once MODEL_PATH . $modelName . ".php"; //аналогично с моделью

		//запускаем экшн, все отловлено. чтоб запустить: экшн в контроллере, контроллер это класс, значит надо созд. объект контроллера 

		$controller = new $controllerName(); //объект контроллер - объект класса контроллер-нэйм
		$controller->$action();  //запускаем метод





		// if ($route[2] != '') {  //2 из-за локалхоста, в реале ставим 1
		// 	//если не пусто - значит есть контроллер для этого
		// 	$controllerName = ucfirst($route[2]."Controller"); //ucfirst - превращает в верхний регистр начало строки
		// 	$modelName =  ucfirst($route[2]."Model");
		// }


		// require_once CONTROLLER_PATH . $controllerName . ".php"; //подключаем либо контроллер по умолчанию, либо тот, что  ERRORS????
		// //отловили выше в if
		// require_once MODEL_PATH . $modelName . ".php"; //аналогично с моделью

		// if (isset($route[3]) && $route[3]!='') { //если существует экшн и непустой, 3 изза локалхоста, ставим 2
		// 	//вытаскиваем экшн
		// 	$action = $route[3];
		// }

		// //запускаем экшн, все отловлено. чтоб запустить: экшн в контроллере, контроллер это класс, значит надо созд. объект контроллера 
		// $controller = new $controllerName(); //объект контроллер - объект класса контроллер-нэйм
		// $controller->$action();  //запускаем метод


	}

	public function errorPage() {  //предусматриваем момент, чтобы никто без авторизации не лез внутрь, здесь будет
		//формироваться например страница 404

	}

}

